# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets

class fluorophore:
    def __init__(self,ex,em):
        self.excitation=ex
        self.emission=em

# excitation and emission spectra imported from the vendors
dstorm_fluorophores=[]
names=['AF488','ATTO488','AF555','AF568','AF647','CF488a','CF568','CF647','Cy3B','DyLight550','Cy5','SYTO13','YOYO-1','SYTOXâ„¢ Green','JF549','JF646']
AF488=fluorophore(490,525)
dstorm_fluorophores.append(AF488)
ATTO488=fluorophore(500,520)
dstorm_fluorophores.append(ATTO488)
AF555=fluorophore(555,580)
dstorm_fluorophores.append(AF555)
AF568=fluorophore(578,603)
dstorm_fluorophores.append(AF568)
AF647=fluorophore(650,665)
dstorm_fluorophores.append(AF647)
CF488a=fluorophore(490,515)
dstorm_fluorophores.append(CF488a)
CF568=fluorophore(562,583)
dstorm_fluorophores.append(CF568)
CF647=fluorophore(650,665)
dstorm_fluorophores.append(CF647)
Cy3B=fluorophore(560,571)
dstorm_fluorophores.append(Cy3B)
DyLight550=fluorophore(553,569)
dstorm_fluorophores.append(DyLight550)
Cy5=fluorophore(651,670)
dstorm_fluorophores.append(Cy5)
SYTO13=fluorophore(488,506)
dstorm_fluorophores.append(SYTO13)
YOYO1=fluorophore(491,508)
dstorm_fluorophores.append(YOYO1)
SYTOXGreen=fluorophore(504,523)
dstorm_fluorophores.append(SYTOXGreen)
JF549=fluorophore(549,571)
dstorm_fluorophores.append(JF549)
JF646=fluorophore(646,664)
dstorm_fluorophores.append(JF646)

count=0
laser_line=[0,0,0,0]
dichroic_split=0
laser_power=[0.00,0.00,0.00,0.00]
frames=[0,0,0,0]
fluorophore=['None','None','None']
filename='ONI_light_program'

def find_laser(ex):
    l=(np.abs(np.asarray(laser_line)-ex)).argmin() # get laser
    return l

def fluorescence_mapping():
    steps=len(fluorophore)-fluorophore.count('None') # one fluorophore per step
    states=1
    lasers=[]
    current_group=0
    left_channel=False
    right_channel=False
    groups=[]
    global dichroic_split
    r_fluorophore=list(reversed(fluorophore)) # make a copy of selected fluorophore for reverse since always starting with redder fluorophore
    for f in range(3):
        tmp=r_fluorophore[f]
        if tmp != 'None':
            ex=dstorm_fluorophores[names.index(tmp)].excitation # get excitation
            em=dstorm_fluorophores[names.index(tmp)].emission # get emission
            lasers.append(find_laser(ex))
            if em >= dichroic_split: # remove emission-based crosstalk
                if right_channel == True:
                    current_group+=1
                else:
                    right_channel=True
            elif em < dichroic_split:
                if left_channel == True:
                    current_group+=1
                else:
                    left_channel=True
            groups.append(current_group)
            
    return steps,states,lasers,groups
                


class Ui_ONI(object):
    def setupUi(self, ONI):
        ONI.setObjectName("ONI")
        ONI.resize(354, 413)
        self.groupBox = QtWidgets.QGroupBox(ONI)
        self.groupBox.setGeometry(QtCore.QRect(20, 10, 321, 391))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.label1 = QtWidgets.QLabel(self.groupBox)
        self.label1.setGeometry(QtCore.QRect(10, 40, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.label1.setFont(font)
        self.label1.setObjectName("label1")
        self.laserline = QtWidgets.QComboBox(self.groupBox)
        self.laserline.setGeometry(QtCore.QRect(70, 40, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.laserline.setFont(font)
        self.laserline.setObjectName("laserline")
        self.laserline.addItem("")
        self.laserline.addItem("")
        self.laserline.addItem("")
        self.laserline.addItem("")
        self.laserline.addItem("")
        self.laserline.addItem("")
        self.laserline.addItem("")
        self.laserline.addItem("")
        self.label2 = QtWidgets.QLabel(self.groupBox)
        self.label2.setGeometry(QtCore.QRect(210, 40, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.label2.setFont(font)
        self.label2.setObjectName("label2")
        self.split = QtWidgets.QComboBox(self.groupBox)
        self.split.setGeometry(QtCore.QRect(240, 40, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.split.setFont(font)
        self.split.setObjectName("split")
        self.split.addItem("")
        self.split.addItem("")
        self.label3 = QtWidgets.QLabel(self.groupBox)
        self.label3.setGeometry(QtCore.QRect(10, 70, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.label3.setFont(font)
        self.label3.setObjectName("label3")
        self.percentiles1 = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.percentiles1.setGeometry(QtCore.QRect(70, 70, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.percentiles1.setFont(font)
        self.percentiles1.setMinimum(0.01)
        self.percentiles1.setMaximum(100.0)
        self.percentiles1.setSingleStep(0.01)
        self.percentiles1.setProperty("value", 30.0)
        self.percentiles1.setObjectName("percentiles1")
        self.percentiles2 = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.percentiles2.setGeometry(QtCore.QRect(120, 70, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.percentiles2.setFont(font)
        self.percentiles2.setMinimum(0.01)
        self.percentiles2.setMaximum(100.0)
        self.percentiles2.setSingleStep(0.01)
        self.percentiles2.setProperty("value", 50.0)
        self.percentiles2.setObjectName("percentiles2")
        self.percentiles3 = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.percentiles3.setGeometry(QtCore.QRect(170, 70, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.percentiles3.setFont(font)
        self.percentiles3.setMinimum(0.01)
        self.percentiles3.setMaximum(100.0)
        self.percentiles3.setSingleStep(0.01)
        self.percentiles3.setProperty("value", 50.0)
        self.percentiles3.setObjectName("percentiles3")
        self.percentiles4 = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.percentiles4.setGeometry(QtCore.QRect(220, 70, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.percentiles4.setFont(font)
        self.percentiles4.setMinimum(0.01)
        self.percentiles4.setMaximum(100.0)
        self.percentiles4.setSingleStep(0.01)
        self.percentiles4.setProperty("value", 30.0)
        self.percentiles4.setObjectName("percentiles4")
        self.label4 = QtWidgets.QLabel(self.groupBox)
        self.label4.setGeometry(QtCore.QRect(10, 100, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.label4.setFont(font)
        self.label4.setObjectName("label4")
        self.frame1 = QtWidgets.QSpinBox(self.groupBox)
        self.frame1.setGeometry(QtCore.QRect(90, 100, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.frame1.setFont(font)
        self.frame1.setMinimum(1)
        self.frame1.setMaximum(10000)
        self.frame1.setProperty("value", 1000)
        self.frame1.setDisplayIntegerBase(10)
        self.frame1.setObjectName("frame1")
        self.frame2 = QtWidgets.QSpinBox(self.groupBox)
        self.frame2.setGeometry(QtCore.QRect(140, 100, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.frame2.setFont(font)
        self.frame2.setMinimum(1)
        self.frame2.setMaximum(10000)
        self.frame2.setProperty("value", 1000)
        self.frame2.setDisplayIntegerBase(10)
        self.frame2.setObjectName("frame2")
        self.frame3 = QtWidgets.QSpinBox(self.groupBox)
        self.frame3.setGeometry(QtCore.QRect(190, 100, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.frame3.setFont(font)
        self.frame3.setMinimum(1)
        self.frame3.setMaximum(10000)
        self.frame3.setProperty("value", 1000)
        self.frame3.setDisplayIntegerBase(10)
        self.frame3.setObjectName("frame3")
        self.frame4 = QtWidgets.QSpinBox(self.groupBox)
        self.frame4.setGeometry(QtCore.QRect(240, 100, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.frame4.setFont(font)
        self.frame4.setMinimum(1)
        self.frame4.setMaximum(10000)
        self.frame4.setProperty("value", 500)
        self.frame4.setDisplayIntegerBase(10)
        self.frame4.setObjectName("frame4")
        self.label5 = QtWidgets.QLabel(self.groupBox)
        self.label5.setGeometry(QtCore.QRect(10, 130, 81, 30))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.label5.setFont(font)
        self.label5.setObjectName("label5")
        self.f1 = QtWidgets.QComboBox(self.groupBox)
        self.f1.setGeometry(QtCore.QRect(90, 130, 72, 24))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        self.f1.setFont(font)
        self.f1.setObjectName("f1")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f1.addItem("")
        self.f2 = QtWidgets.QComboBox(self.groupBox)
        self.f2.setGeometry(QtCore.QRect(160, 130, 72, 24))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        self.f2.setFont(font)
        self.f2.setObjectName("f2")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f2.addItem("")
        self.f3 = QtWidgets.QComboBox(self.groupBox)
        self.f3.setGeometry(QtCore.QRect(230, 130, 72, 24))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        self.f3.setFont(font)
        self.f3.setObjectName("f3")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.f3.addItem("")
        self.start = QtWidgets.QPushButton(self.groupBox)
        self.start.setGeometry(QtCore.QRect(10, 160, 291, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.start.setFont(font)
        self.start.setObjectName("start")
        self.console = QtWidgets.QTextEdit(self.groupBox)
        self.console.setEnabled(True)
        self.console.setGeometry(QtCore.QRect(10, 230, 291, 151))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.console.setFont(font)
        self.console.setReadOnly(True)
        self.console.setObjectName("preview")
        self.label6 = QtWidgets.QLabel(self.groupBox)
        self.label6.setGeometry(QtCore.QRect(10, 210, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.label6.setFont(font)
        self.label6.setObjectName("label6")
        self.console.setFont(font)
        self.console.setReadOnly(True)
        self.console.setObjectName("filename:")
        self.label7 = QtWidgets.QLabel(self.groupBox)
        self.label7.setGeometry(QtCore.QRect(10, 190, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.label7.setFont(font)
        self.label7.setObjectName("label7")
        self.output = QtWidgets.QLineEdit(self.groupBox)
        self.output.setEnabled(True)
        self.output.setGeometry(QtCore.QRect(70, 190, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.output.setFont(font)
        self.output.setReadOnly(False)
        self.output.setObjectName("output")
        self.output.setAlignment(QtCore.Qt.AlignRight)
        self.format = QtWidgets.QLineEdit(self.groupBox)
        self.format.setEnabled(True)
        self.format.setGeometry(QtCore.QRect(266, 190, 35, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.format.setFont(font)
        self.format.setReadOnly(True)
        self.format.setObjectName("format")
        

        self.retranslateUi(ONI)
        QtCore.QMetaObject.connectSlotsByName(ONI)
        self.init() # read default values
        
        # connect signals to slots
        self.laserline.currentIndexChanged.connect(self.set_laserline)
        self.split.currentIndexChanged.connect(self.set_split)
        self.percentiles1.editingFinished.connect(self.set_power1)
        self.percentiles2.editingFinished.connect(self.set_power2)
        self.percentiles3.editingFinished.connect(self.set_power3)
        self.percentiles4.editingFinished.connect(self.set_power4)
        self.frame1.editingFinished.connect(self.set_frame1)
        self.frame2.editingFinished.connect(self.set_frame2)
        self.frame3.editingFinished.connect(self.set_frame3)
        self.frame4.editingFinished.connect(self.set_frame4)
        self.f1.currentIndexChanged.connect(self.set_fluorophore1)
        self.f2.currentIndexChanged.connect(self.set_fluorophore2)
        self.f3.currentIndexChanged.connect(self.set_fluorophore3)
        self.start.clicked.connect(self.generate)
        self.output.editingFinished.connect(self.set_output)
        

    def retranslateUi(self, ONI):
        _translate = QtCore.QCoreApplication.translate
        ONI.setWindowTitle(_translate("Widget", "ONI"))
        self.groupBox.setTitle(_translate("Widget", "ONI Light Program Generator"))
        self.label1.setText(_translate("Widget", "Laser lines:"))
        self.laserline.setItemText(0, _translate("Widget", "405,488,561,640"))
        self.laserline.setItemText(1, _translate("Widget", "405,473,561,640"))
        self.laserline.setItemText(2, _translate("Widget", "405,473,532,640"))
        self.laserline.setItemText(3, _translate("Widget", "405,561,640,750"))
        self.laserline.setItemText(4, _translate("Widget", "488,561,640,750"))
        self.laserline.setItemText(5, _translate("Widget", "375,488,561,640"))
        self.laserline.setItemText(6, _translate("Widget", "375,473,532,640"))
        self.laserline.setItemText(7, _translate("Widget", "405,488,532,640"))
        self.label2.setText(_translate("Widget", "Split:"))
        self.split.setItemText(0, _translate("Widget", "640"))
        self.split.setItemText(1, _translate("Widget", "560"))
        self.label3.setText(_translate("Widget", "Percentile:"))
        self.label4.setText(_translate("Widget", "Frame counts:"))
        self.label5.setText(_translate("Widget", "Fluorophores \n (low to high):"))
        self.f1.setItemText(0, _translate("Widget", "None"))
        self.f1.setItemText(1, _translate("Widget", "AF488"))
        self.f1.setItemText(2, _translate("Widget", "ATTO488"))
        self.f1.setItemText(3, _translate("Widget", "AF555"))
        self.f1.setItemText(4, _translate("Widget", "AF568"))
        self.f1.setItemText(5, _translate("Widget", "AF647"))
        self.f1.setItemText(6, _translate("Widget", "CF488a"))
        self.f1.setItemText(7, _translate("Widget", "CF568"))
        self.f1.setItemText(8, _translate("Widget", "CF647"))
        self.f1.setItemText(9, _translate("Widget", "Cy3B"))
        self.f1.setItemText(10, _translate("Widget", "DyLight550"))
        self.f1.setItemText(11, _translate("Widget", "Cy5"))
        self.f1.setItemText(12, _translate("Widget", "SYTO13"))
        self.f1.setItemText(13, _translate("Widget", "YOYO-1"))
        self.f1.setItemText(14, _translate("Widget", "SYTOXâ„¢ Green"))
        self.f1.setItemText(15, _translate("Widget", "JF549"))
        self.f1.setItemText(16, _translate("Widget", "JF646"))
        self.f2.setItemText(0, _translate("Widget", "None"))
        self.f2.setItemText(1, _translate("Widget", "AF488"))
        self.f2.setItemText(2, _translate("Widget", "ATTO488"))
        self.f2.setItemText(3, _translate("Widget", "AF555"))
        self.f2.setItemText(4, _translate("Widget", "AF568"))
        self.f2.setItemText(5, _translate("Widget", "AF647"))
        self.f2.setItemText(6, _translate("Widget", "CF488a"))
        self.f2.setItemText(7, _translate("Widget", "CF568"))
        self.f2.setItemText(8, _translate("Widget", "CF647"))
        self.f2.setItemText(9, _translate("Widget", "Cy3B"))
        self.f2.setItemText(10, _translate("Widget", "DyLight550"))
        self.f2.setItemText(11, _translate("Widget", "Cy5"))
        self.f2.setItemText(12, _translate("Widget", "SYTO13"))
        self.f2.setItemText(13, _translate("Widget", "YOYO-1"))
        self.f2.setItemText(14, _translate("Widget", "SYTOXâ„¢ Green"))
        self.f2.setItemText(15, _translate("Widget", "JF549"))
        self.f2.setItemText(16, _translate("Widget", "JF646"))
        self.f3.setItemText(0, _translate("Widget", "None"))
        self.f3.setItemText(1, _translate("Widget", "AF488"))
        self.f3.setItemText(2, _translate("Widget", "ATTO488"))
        self.f3.setItemText(3, _translate("Widget", "AF555"))
        self.f3.setItemText(4, _translate("Widget", "AF568"))
        self.f3.setItemText(5, _translate("Widget", "AF647"))
        self.f3.setItemText(6, _translate("Widget", "CF488a"))
        self.f3.setItemText(7, _translate("Widget", "CF568"))
        self.f3.setItemText(8, _translate("Widget", "CF647"))
        self.f3.setItemText(9, _translate("Widget", "Cy3B"))
        self.f3.setItemText(10, _translate("Widget", "DyLight550"))
        self.f3.setItemText(11, _translate("Widget", "Cy5"))
        self.f3.setItemText(12, _translate("Widget", "SYTO13"))
        self.f3.setItemText(13, _translate("Widget", "YOYO-1"))
        self.f3.setItemText(14, _translate("Widget", "SYTOXâ„¢ Green"))
        self.f3.setItemText(15, _translate("Widget", "JF549"))
        self.f3.setItemText(16, _translate("Widget", "JF646"))
        self.start.setText(_translate("Widget", "Generate Light Program"))
        self.console.setText("No light program generated")
        self.label6.setText(_translate("Widget", "Console:"))
        self.label7.setText(_translate("Widget", "Filename:"))
        self.output.setText(filename)
        self.format.setText('.json')
        
    def init(self):
        tmp=self.laserline.currentText()
        tmp=tmp.split(',')
        for i in range(4): laser_line[i]=int(tmp[i]) # read laser lines
        
        global dichroic_split
        tmp=self.split.currentText()
        dichroic_split=int(tmp) # read dichroic split
        
        tmp=self.percentiles1.value() # read all laser powers
        laser_power[0]=tmp
        tmp=self.percentiles2.value()
        laser_power[1]=tmp
        tmp=self.percentiles3.value()
        laser_power[2]=tmp
        tmp=self.percentiles4.value()
        laser_power[3]=tmp
        
        tmp=self.frame1.value() # read all frame counts
        frames[0]=tmp
        tmp=self.frame2.value()
        frames[1]=tmp
        tmp=self.frame3.value()
        frames[2]=tmp
        tmp=self.frame4.value()
        frames[3]=tmp
        
        tmp=self.f1.currentText() # read all fluorophores
        fluorophore[0]=tmp
        tmp=self.f2.currentText() # read all fluorophores
        fluorophore[1]=tmp
        tmp=self.f3.currentText() # read all fluorophores
        fluorophore[2]=tmp
            
    def set_laserline(self):
        tmp=self.laserline.currentText()
        tmp=tmp.split(',')
        for i in range(4): laser_line[i]=int(tmp[i]) # read laser lines
        
    def set_split(self):
        global dichroic_split
        tmp=self.split.currentText()
        dichroic_split=int(tmp)
        
    def set_power1(self):
        tmp=self.percentiles1.value()
        laser_power[0]=tmp
    
    def set_power2(self):
        tmp=self.percentiles2.value()
        laser_power[1]=tmp
    
    def set_power3(self):
        tmp=self.percentiles3.value()
        laser_power[2]=tmp
        
    def set_power4(self):
        tmp=self.percentiles4.value()
        laser_power[3]=tmp
        
    def set_frame1(self):
        tmp=self.frame1.value()
        frames[0]=tmp
        
    def set_frame2(self):
        tmp=self.frame2.value()
        frames[1]=tmp
    
    def set_frame3(self):
        tmp=self.frame3.value()
        frames[2]=tmp
        
    def set_frame4(self):
        tmp=self.frame4.value()
        frames[3]=tmp
        
    def _print(self, text): # print in built-in console
        self.console.setText(text)
        
    def set_fluorophore1(self):
        tmp=self.f1.currentText()
        if tmp != 'None':
            if tmp in fluorophore: # check repetitive entry
                self._print('WARNING: this fluorophore has been already selected')
                self.f1.setCurrentIndex(0)
                return
            self._print('No light program generated')
        else:
            if self.f2.currentIndex() != 0:
                self.f2.setCurrentIndex(0)
            if self.f3.currentIndex() != 0:
                self.f3.setCurrentIndex(0)
        fluorophore[0]=tmp
    
    def set_fluorophore2(self):
        tmp=self.f2.currentText()
        if tmp != 'None':
            if self.f1.currentText() == 'None': # check if previous input
                self._print('WARNING: previous slot not filled')
                self.f2.setCurrentIndex(0)
                return
            if tmp in fluorophore: # check repetitive entry
                self._print('WARNING: this fluorophore has been already selected')
                self.f2.setCurrentIndex(0)
                return
            ex1=dstorm_fluorophores[names.index(self.f1.currentText())].excitation
            ex2=dstorm_fluorophores[names.index(tmp)].excitation
            if ex2 <= ex1: # check order, must from low to high
                self._print('WARNING: the excitation wavelength must be from low to high')
                self.f2.setCurrentIndex(0)
                return
            l1=find_laser(ex1)
            l2=find_laser(ex2)
            if l2 == l1:
                self._print('WARNING: this fluorophore may cause crosstalk')
                self.f2.setCurrentIndex(0)
                return
            self._print('No light program generated')
        else:
            if self.f3.currentIndex() != 0:
                self.f3.setCurrentIndex(0)

        fluorophore[1]=tmp
            
            
    def set_fluorophore3(self):
        tmp=self.f3.currentText()
        if tmp != 'None':
            if self.f1.currentText() == 'None' or self.f2.currentText() == 'None': # check if previous input
                self._print('WARNING: previous slot not filled')
                self.f3.setCurrentIndex(0)
                return
            if tmp in fluorophore: # check repetitive entry
                self._print('WARNING: this fluorophore has been already selected')
                self.f3.setCurrentIndex(0)
                return
            ex1=dstorm_fluorophores[names.index(self.f1.currentText())].excitation
            ex2=dstorm_fluorophores[names.index(self.f2.currentText())].excitation
            ex3=dstorm_fluorophores[names.index(tmp)].excitation
            if ex3 <= ex2 or ex3 <= ex1: # check order, must from low to high
                self._print('WARNING: the excitation wavelength must be from low to high')
                self.f3.setCurrentIndex(0)
                return
            l1=find_laser(ex1)
            l2=find_laser(ex2)
            l3=find_laser(ex3)
            if l3 == l2 or l3 == l1:
                self._print('WARNING: this fluorophore may cause crosstalk')
                self.f3.setCurrentIndex(0)
                return
            self._print('No light program generated')

        fluorophore[2]=tmp
        
    def set_output(self):
        global filename
        filename=self.output.text()
        
    def generate(self):
        if '<' in filename or '>' in filename or ':' in filename or '"' in filename or '/' in filename or '\\' in filename or '|' in filename or '?' in filename or '*' in filename:
            self._print('WARNING: invalid filename')
            # self.output.setText('ONI_light_program')
            return

        steps,states,lasers,groups=fluorescence_mapping()
        if steps == 0:
            self._print('WARNING: no light program specified')
        else:
            global count
            count+=1
            f=open(filename+self.format.text(),'w')
            f.write('{"nLights":4,"steps":[')
            for i in range(steps):
                l=[0.00,0.00,0.00,0.00]
                f.write('{"nRepeats":'+str(frames[lasers[i]])+',"states":[{"group":'+str(groups[i])+',"record":true,"values":')
                for j in range(4):
                    if j == lasers[i]:
                        l[j]=laser_power[lasers[i]]
                f.write(str(l)+'}]}')
                if i != (steps-1):
                    f.write(',')
            f.write(']}')
            #f.write('{"nLights":4,"steps":[{"nRepeats":2,"states":[{"group":0,"record":true,"values":[100.0,0.0,0.0,0.0]},{"group":0,"record":true,"values":[0.0,100.0,0.0,0.0]},{"group":0,"record":true,"values":[0.0,0.0,100.0,0.0]},{"group":0,"record":true,"values":[0.0,0.0,0.0,100.0]}]},{"nRepeats":8,"states":[{"group":0,"record":true,"values":[0.0,0.0,0.0,0.0]}]},{"nRepeats":2,"states":[{"group":0,"record":true,"values":[0.0,50.0,0.0,0.0]},{"group":0,"record":true,"values":[0.0,100.0,0.0,0.0]},{"group":0,"record":true,"values":[0.0,0.0,0.0,50.0]},{"group":0,"record":true,"values":[0.0,0.0,0.0,100.0]}]}]}')
            f.close()
            final_output='Light program (#'+str(count)+') generated as\n"'+filename+self.format.text()+'":\n'
            for i in range(steps):
                final_output=final_output+'step '+str(i+1)+': state 1, laser '+str(laser_line[lasers[i]])+' at '+str(laser_power[lasers[i]])+'%, '+str(frames[lasers[i]])+' frames, group '+str(groups[i])+'\n'
            final_output=final_output+'\nYou may now load it this program into NimOS and optimize the "laser power" and "frame count"'
            self._print(final_output)
        
if __name__ == "__main__":
    app=QtWidgets.QApplication(sys.argv)
    ONI=QtWidgets.QMainWindow()
    ui=Ui_ONI()
    ui.setupUi(ONI)
    ONI.show()
    sys.exit(app.exec_())
